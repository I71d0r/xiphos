@model MelodyListModel

@{
    ViewData["Title"] = "Manage Melodies";

    var returnUrl = $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}{Context.Request.QueryString}";
}

<div class="text-left">
    <h2 class="text-light pt-4 float-left">@ViewData["Title"]</h2>

    <div class="row float-right mr-3 pt-5 pb-2">
        @* --Notable--
            Using a simple view configuration we can either display or hide certain elements.
        *@
        @if (ViewBag.IsAdmin)
        {
            <div class="mr-5">
                <a class="btn btn-outline-primary px-4"
                   asp-route-returnUrl="@returnUrl"
                   asp-action="Create">
                    New Melody
                </a>
            </div>
        }

        <div class="form-inline text-light row">
            <form asp-action="Index" method="get">
                <input id="search_box"
                       type="text"
                       placeholder="Search..."
                       name="filter"
                       value="@Model.CurrentFilter"
                       class="form-control">
                <a class="btn bg-transparent btn-sm"
                   style="margin-left: -30px; z-index: 1000;"
                   asp-action="Index"
                   asp-route-sort="@Model.CurrentSort"
                   asp-route-filter=""
                   asp-route-pageIndex="@Model.PageIndex"
                   asp-route-pageSize="@Model.PageSize">
                    &#215;
                </a>
                <input type="hidden" name="sort" value="@Model.CurrentSort">
                <input type="hidden" name="filter" value="@Model.CurrentFilter">
                <input type="hidden" name="pageIndex" value="@Model.PageIndex">
                <input type="hidden" name="pageSize" value="@Model.PageSize">
                <button type="submit" class="btn btn-info">&#128270;</button>
            </form>
        </div>
    </div>


    @* --Notable--
        Attribute asp-route-parameter_name forms an url matching the routing pattern.
        E.g. my routing pattern in startup is "{controller=Home}/{action=Index}/{id?}"
        This means the id parameter will be mapped as route and other parameters will go to query string.

        <a asp-action="Index" asp-route-id="id_value" asp-route-something="something_value">...</a>

        will be mapped to link like

        .../CurrentArea/CurrentController/Index/{id_value}?something={something_value}
    *@
    <table class="table table-hover table-dark">
        <thead>
            <tr>
                <th class="pl-3" scope="col">
                    <a asp-action="Index"
                       asp-route-sort="@Model.IdSort"
                       asp-route-filter="@Model.CurrentFilter"
                       asp-route-pageIndex="@Model.PageIndex"
                       asp-route-pageSize="@Model.PageSize"
                       class="text-info">
                        @Html.DisplayNameFor(m => m.Default.Id)

                        @* --Notable--
                            Using server directives automatically escapes the content.
                            Html.Raw(...) skips the encoding.
                        *@
                        <span class="h5 pl-2">@Html.Raw(Model.IdArrow)</span>
                    </a>
                </th>
                <th class="w-75" scope="col">
                    <a asp-action="Index"
                       asp-route-sort="@Model.NameSort"
                       asp-route-filter="@Model.CurrentFilter"
                       asp-route-pageIndex="@Model.PageIndex"
                       asp-route-pageSize="@Model.PageSize"
                       class="text-info">
                        @Html.DisplayNameFor(m => m.Default.Name)
                        <span class="h5 pl-2">@Html.Raw(Model.NameArrow)</span>
                    </a>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Melodies)
            {
                <tr>
                    <th class="pl-3" scope="row">@Html.DisplayFor(_ => item.Id)</th>
                    <td>
                        @Html.DisplayFor(_ => item.Name)
                        <div class="float-right row mr-3">
                            @* --Notable--
                                Edit row is a bit more complicated design.
                                a) Admin should see Edit & Delete
                                b) User is readonly and should see just View with a different button style
                            *@

                            @if (ViewBag.IsAdmin)
                            {
                                <a class="btn btn-outline-primary btn-sm px-4"
                                   asp-route-returnUrl="@returnUrl"
                                   asp-action="Edit"
                                   asp-route-id="@item.Id">
                                    Edit
                                </a>

                                @* --Notable--
                                    We want a confirmation before delete. Therefore we will use the form
                                    with a script on submit button.
                                *@
                                <form asp-route-returnUrl="@returnUrl" asp-action="Delete">
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <input type="submit" value="Delete" class="btn btn-outline-danger btn-sm ml-4 px-4"
                                           onclick="return confirm('Are you sure you want to delete @item.Name?');" />
                                </form>
                            }
                            else
                            {
                                <a class="btn btn-outline-info btn-sm px-4"
                                   asp-route-sort="@Model.CurrentSort"
                                   asp-route-filter="@Model.CurrentFilter"
                                   asp-route-pageIndex="@Model.PageIndex"
                                   asp-route-pageSize="@Model.PageSize"
                                   asp-action="View"
                                   asp-route-id="@item.Id">View</a>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @{
        var nextDisabled = Model.NextDisabled ? "disabled" : "";
        var previousDisabled = Model.PreviousDisabled ? "disabled" : "";
    }

    @* --Notable--
        Code blocks syntax is clever in a way. It defines the beginning but automatically detects the end.
        Sometimes this produces different results than one might expect.
            E.g. Model.PageIndex = 2
            asp-route-pageIndex="@(Model.PageIndex - 1)"  integer evaluation => ...pageIndex=1...
            asp-route-pageIndex="@Model.PageIndex - 1"    string evaluation  => ...pageIndex=2 - 1...
    *@
    <a class="btn btn-secondary btn-sm px-4 @previousDisabled"
       asp-route-sort="@Model.CurrentSort"
       asp-route-filter="@Model.CurrentFilter"
       asp-route-pageIndex="@(Model.PageIndex - 1)"
       asp-route-pageSize="@Model.PageSize"
       asp-action="Index">
        <<
    </a>
    <label class="text-light">Page @(Model.PageIndex + 1) out of @Model.PageCount</label>
    <a class="btn btn-secondary btn-sm px-4 @nextDisabled"
       asp-route-sort="@Model.CurrentSort"
       asp-route-filter="@Model.CurrentFilter"
       asp-route-pageIndex="@(Model.PageIndex + 1)"
       asp-route-pageSize="@Model.PageSize"
       asp-action="Index">
        >>
    </a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}