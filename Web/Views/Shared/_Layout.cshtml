<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    @* --Notable--
        Layout is a partial view that gets merged with the final view/page.
        In order to modify the layout based on the page displayed, you
        can use ViewData/ViewBag where what you set on controller/page code-behind
        will be accessible in the rendering process.
           For instance here the page set title that is rendered by layout as HTML
        as the layout owns the head section.
    *@
    <title>@ViewData["Title"] - Xiphos</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index"><sup>&#9834;</sup><span class="h2">&#9834;</span><sup>&#9834;</sup></a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="Index">Tone Zone</a>
                        </li>
                    </ul>

                    @* --Notable--
                        The tag partial renders the partial view. 
                        Similarly, you can use a server expression like
                        
                        @await Html.PartialAsync("_MyPartialView", myModel)

                        This gets handy especially for complex but repepetive UI elements
                        which you can easily render in a loop thru a model collection.
                    *@
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted bg-dark">
        <div class="container">
            &copy; 2021 - Xiphos - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @* --Notable--
        Scripts section is automatically rendered by the layout if exists.
    *@
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
